// <auto-generated />
using System;
using Industrial.Adam.ScaleLogger.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Industrial.Adam.ScaleLogger.Migrations
{
    [DbContext(typeof(ScaleLoggerDbContext))]
    partial class ScaleLoggerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Industrial.Adam.ScaleLogger.Data.Entities.ScaleDevice", b =>
                {
                    b.Property<string>("DeviceId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Configuration")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("DeviceId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Location");

                    b.HasIndex("Name");

                    b.ToTable("ScaleDevices");
                });

            modelBuilder.Entity("Industrial.Adam.ScaleLogger.Data.Entities.SystemEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("EventType");

                    b.HasIndex("Severity");

                    b.HasIndex("Timestamp");

                    b.HasIndex("EventType", "Timestamp");

                    b.ToTable("SystemEvents");
                });

            modelBuilder.Entity("Industrial.Adam.ScaleLogger.Data.Entities.WeighingTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Channel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsStable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("OperatorId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RawValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("WeightValue")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("WorkOrder")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BatchNumber");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ProductCode");

                    b.HasIndex("Timestamp");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.HasIndex("WorkOrder");

                    b.HasIndex("DeviceId", "Timestamp");

                    b.ToTable("WeighingTransactions");
                });

            modelBuilder.Entity("Industrial.Adam.ScaleLogger.Data.Entities.SystemEvent", b =>
                {
                    b.HasOne("Industrial.Adam.ScaleLogger.Data.Entities.ScaleDevice", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Industrial.Adam.ScaleLogger.Data.Entities.WeighingTransaction", b =>
                {
                    b.HasOne("Industrial.Adam.ScaleLogger.Data.Entities.ScaleDevice", "Device")
                        .WithMany("WeighingTransactions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Industrial.Adam.ScaleLogger.Data.Entities.ScaleDevice", b =>
                {
                    b.Navigation("WeighingTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
