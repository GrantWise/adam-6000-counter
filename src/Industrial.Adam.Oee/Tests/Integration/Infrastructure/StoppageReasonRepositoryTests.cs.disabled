using Industrial.Adam.Oee.Domain.Entities;
using Industrial.Adam.Oee.Domain.Interfaces;
using Industrial.Adam.Oee.Infrastructure;
using Industrial.Adam.Oee.Infrastructure.Repositories;
using Industrial.Adam.Oee.Infrastructure.Services;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Testcontainers.PostgreSql;
using Xunit;
using Dapper;

namespace Industrial.Adam.Oee.Tests.Integration.Infrastructure;

/// <summary>
/// Integration tests for StoppageReasonRepository
/// Tests the 3x3 matrix reason code system with categories and subcodes
/// </summary>
public sealed class StoppageReasonRepositoryTests : IAsyncLifetime
{
    private readonly PostgreSqlContainer _postgresContainer;
    private IDbConnectionFactory _connectionFactory = null!;
    private IStoppageReasonRepository _repository = null!;
    private IServiceProvider _serviceProvider = null!;

    public StoppageReasonRepositoryTests()
    {
        _postgresContainer = new PostgreSqlBuilder()
            .WithImage("timescale/timescaledb:latest-pg15")
            .WithDatabase("adam_counters")
            .WithUsername("adam_user")
            .WithPassword("adam_password")
            .WithPortBinding(54323, 5432)
            .Build();
    }

    public async Task InitializeAsync()
    {
        await _postgresContainer.StartAsync();

        var services = new ServiceCollection();
        services.AddLogging(builder => builder.AddConsole().SetMinimumLevel(LogLevel.Debug));
        
        services.AddSingleton<IDbConnectionFactory>(serviceProvider => 
        {
            var logger = serviceProvider.GetRequiredService<ILogger<NpgsqlConnectionFactory>>();
            return new NpgsqlConnectionFactory(_postgresContainer.GetConnectionString(), logger);
        });
        
        _serviceProvider = services.BuildServiceProvider();
        _connectionFactory = _serviceProvider.GetRequiredService<IDbConnectionFactory>();
        
        var logger = _serviceProvider.GetRequiredService<ILogger<StoppageReasonRepository>>();
        _repository = new StoppageReasonRepository(_connectionFactory, logger);

        await SetupTestDatabaseAsync();
        await SeedTestDataAsync();
    }

    public async Task DisposeAsync()
    {
        if (_serviceProvider is IDisposable disposable)
            disposable.Dispose();
        await _postgresContainer.DisposeAsync();
    }

    [Fact]
    public async Task GetCategoriesAsync_ReturnsAll9Categories()
    {
        // Act
        var categories = await _repository.GetCategoriesAsync();

        // Assert
        var categoriesList = categories.ToList();
        Assert.Equal(9, categoriesList.Count);
        
        // Verify all standard category codes are present
        var expectedCodes = new[] { "A1", "A2", "A3", "B1", "B2", "B3", "C1", "C2", "C3" };
        foreach (var code in expectedCodes)
        {
            Assert.Contains(categoriesList, c => c.CategoryCode == code);
        }
    }

    [Fact]
    public async Task GetCategoriesAsync_WithActiveFilter_ReturnsOnlyActiveCategories()
    {
        // Arrange - Deactivate one category
        var categories = await _repository.GetCategoriesAsync();
        var categoryToDeactivate = categories.First(c => c.CategoryCode == "A3");
        categoryToDeactivate.Deactivate();
        await _repository.UpdateCategoryAsync(categoryToDeactivate);

        // Act
        var activeCategories = await _repository.GetCategoriesAsync(activeOnly: true);

        // Assert
        var activeCategoriesList = activeCategories.ToList();
        Assert.Equal(8, activeCategoriesList.Count);
        Assert.DoesNotContain(activeCategoriesList, c => c.CategoryCode == "A3");
        Assert.All(activeCategoriesList, c => Assert.True(c.IsActive));
    }

    [Fact]
    public async Task GetCategoryByCodeAsync_WithValidCode_ReturnsCategory()
    {
        // Act
        var category = await _repository.GetCategoryByCodeAsync("A1");

        // Assert
        Assert.NotNull(category);
        Assert.Equal("A1", category.CategoryCode);
        Assert.Equal("Mechanical Failure", category.CategoryName);
        Assert.Equal(1, category.MatrixRow);
        Assert.Equal(1, category.MatrixCol);
    }

    [Fact]
    public async Task GetCategoryByCodeAsync_WithInvalidCode_ReturnsNull()
    {
        // Act
        var category = await _repository.GetCategoryByCodeAsync("X9");

        // Assert
        Assert.Null(category);
    }

    [Fact]
    public async Task GetCategoryByMatrixPositionAsync_WithValidPosition_ReturnsCategory()
    {
        // Act
        var category = await _repository.GetCategoryByMatrixPositionAsync(2, 3);

        // Assert
        Assert.NotNull(category);
        Assert.Equal("B3", category.CategoryCode);
        Assert.Equal(2, category.MatrixRow);
        Assert.Equal(3, category.MatrixCol);
    }

    [Fact]
    public async Task GetSubcodesAsync_WithValidCategory_Returns9Subcodes()
    {
        // Act
        var subcodes = await _repository.GetSubcodesAsync("A1");

        // Assert
        var subcodesList = subcodes.ToList();
        Assert.Equal(9, subcodesList.Count);
        Assert.All(subcodesList, s => Assert.Equal("A1", s.CategoryCode));
        
        // Verify all subcodes 1-9 are present
        for (int i = 1; i <= 9; i++)
        {
            Assert.Contains(subcodesList, s => s.Subcode == i.ToString());
        }
    }

    [Fact]
    public async Task GetSubcodesAsync_WithInvalidCategory_ReturnsEmpty()
    {
        // Act
        var subcodes = await _repository.GetSubcodesAsync("X9");

        // Assert
        Assert.Empty(subcodes);
    }

    [Fact]
    public async Task GetSubcodeAsync_WithValidCategoryAndSubcode_ReturnsSubcode()
    {
        // Act
        var subcode = await _repository.GetSubcodeAsync("A1", "1");

        // Assert
        Assert.NotNull(subcode);
        Assert.Equal("A1", subcode.CategoryCode);
        Assert.Equal("1", subcode.Subcode);
        Assert.Equal("Motor Failure", subcode.SubcodeName);
    }

    [Fact]
    public async Task GetSubcodeAsync_WithInvalidCombination_ReturnsNull()
    {
        // Act
        var subcode = await _repository.GetSubcodeAsync("A1", "99");

        // Assert
        Assert.Null(subcode);
    }

    [Fact]
    public async Task GetSubcodeByMatrixPositionAsync_WithValidPosition_ReturnsSubcode()
    {
        // Act
        var subcode = await _repository.GetSubcodeByMatrixPositionAsync("A1", 1, 2);

        // Assert
        Assert.NotNull(subcode);
        Assert.Equal("A1", subcode.CategoryCode);
        Assert.Equal(1, subcode.MatrixRow);
        Assert.Equal(2, subcode.MatrixCol);
        Assert.Equal("2", subcode.Subcode); // Should be subcode "2"
    }

    [Fact]
    public async Task CreateCategoryAsync_WithValidCategory_CreatesSuccessfully()
    {
        // Arrange
        var category = new StoppageReasonCategory(
            "D1",
            "New Test Category",
            1, 1,
            "Test category description");

        // Act
        var id = await _repository.CreateCategoryAsync(category);

        // Assert
        Assert.True(id > 0);

        // Verify creation
        var retrieved = await _repository.GetCategoryByCodeAsync("D1");
        Assert.NotNull(retrieved);
        Assert.Equal("D1", retrieved.CategoryCode);
        Assert.Equal("New Test Category", retrieved.CategoryName);
    }

    [Fact]
    public async Task CreateCategoryAsync_WithDuplicateCode_ThrowsException()
    {
        // Arrange
        var category = new StoppageReasonCategory(
            "A1", // Duplicate code
            "Duplicate Test",
            2, 2);

        // Act & Assert
        await Assert.ThrowsAsync<InvalidOperationException>(
            () => _repository.CreateCategoryAsync(category));
    }

    [Fact]
    public async Task CreateCategoryAsync_WithDuplicateMatrixPosition_ThrowsException()
    {
        // Arrange
        var category = new StoppageReasonCategory(
            "D2",
            "Matrix Duplicate Test",
            1, 1); // Position already used by A1

        // Act & Assert
        await Assert.ThrowsAsync<InvalidOperationException>(
            () => _repository.CreateCategoryAsync(category));
    }

    [Fact]
    public async Task CreateSubcodeAsync_WithValidSubcode_CreatesSuccessfully()
    {
        // Arrange
        var category = await _repository.GetCategoryByCodeAsync("A1");
        Assert.NotNull(category);

        var subcode = new StoppageReasonSubcode(
            category.Id,
            "A1",
            "10",
            "Test Subcode",
            "Test subcode description",
            3, 3);

        // Act
        var id = await _repository.CreateSubcodeAsync(subcode);

        // Assert
        Assert.True(id > 0);

        // Verify creation
        var retrieved = await _repository.GetSubcodeAsync("A1", "10");
        Assert.NotNull(retrieved);
        Assert.Equal("10", retrieved.Subcode);
        Assert.Equal("Test Subcode", retrieved.SubcodeName);
    }

    [Fact]
    public async Task UpdateCategoryAsync_WithValidChanges_UpdatesSuccessfully()
    {
        // Arrange
        var category = await _repository.GetCategoryByCodeAsync("B1");
        Assert.NotNull(category);

        category.UpdateDetails("Updated Material Issues", "Updated description");

        // Act
        var result = await _repository.UpdateCategoryAsync(category);

        // Assert
        Assert.True(result);

        // Verify update
        var updated = await _repository.GetCategoryByCodeAsync("B1");
        Assert.NotNull(updated);
        Assert.Equal("Updated Material Issues", updated.CategoryName);
        Assert.Equal("Updated description", updated.CategoryDescription);
    }

    [Fact]
    public async Task MatrixPositionValidation_EnforcesUniquePositions()
    {
        // Arrange
        var testCategories = new[]
        {
            new { Code = "T1", Name = "Test 1", Row = 1, Col = 1 },
            new { Code = "T2", Name = "Test 2", Row = 1, Col = 1 } // Duplicate position
        };

        var category1 = new StoppageReasonCategory("T1", "Test 1", 1, 1);
        await _repository.CreateCategoryAsync(category1);

        // Act & Assert
        var category2 = new StoppageReasonCategory("T2", "Test 2", 1, 1);
        await Assert.ThrowsAsync<InvalidOperationException>(
            () => _repository.CreateCategoryAsync(category2));
    }

    [Fact]
    public async Task CategoryCodeGeneration_GeneratesCorrectCodes()
    {
        // Test static method for generating category codes
        var testCases = new[]
        {
            new { Row = 1, Col = 1, Expected = "A1" },
            new { Row = 2, Col = 2, Expected = "B2" },
            new { Row = 3, Col = 3, Expected = "C3" },
            new { Row = 1, Col = 3, Expected = "A3" },
            new { Row = 3, Col = 1, Expected = "C1" }
        };

        foreach (var testCase in testCases)
        {
            var generated = StoppageReasonCategory.GenerateCategoryCode(testCase.Row, testCase.Col);
            Assert.Equal(testCase.Expected, generated);
        }
    }

    [Fact]
    public async Task CategoryCodeParsing_ParsesCorrectly()
    {
        // Test static method for parsing category codes
        var testCases = new[]
        {
            new { Code = "A1", ExpectedRow = 1, ExpectedCol = 1 },
            new { Code = "B2", ExpectedRow = 2, ExpectedCol = 2 },
            new { Code = "C3", ExpectedRow = 3, ExpectedCol = 3 },
            new { Code = "A3", ExpectedRow = 1, ExpectedCol = 3 },
            new { Code = "C1", ExpectedRow = 3, ExpectedCol = 1 }
        };

        foreach (var testCase in testCases)
        {
            var (row, col) = StoppageReasonCategory.ParseCategoryCodeToMatrix(testCase.Code);
            Assert.Equal(testCase.ExpectedRow, row);
            Assert.Equal(testCase.ExpectedCol, col);
        }
    }

    [Fact]
    public async Task GetReasonCodeHierarchyAsync_ReturnsCompleteStructure()
    {
        // Act
        var hierarchy = await _repository.GetReasonCodeHierarchyAsync();

        // Assert
        var hierarchyList = hierarchy.ToList();
        Assert.Equal(9, hierarchyList.Count); // 9 categories

        foreach (var categoryWithSubcodes in hierarchyList)
        {
            Assert.NotNull(categoryWithSubcodes.Category);
            Assert.Equal(9, categoryWithSubcodes.Subcodes.Count()); // 9 subcodes per category
        }
    }

    [Fact]
    public async Task GetActiveReasonCodesAsync_ReturnsOnlyActiveCodesWithSubcodes()
    {
        // Arrange - Deactivate a subcode
        var subcodes = await _repository.GetSubcodesAsync("A1");
        var subcodeToDeactivate = subcodes.First(s => s.Subcode == "9");
        subcodeToDeactivate.Deactivate();
        await _repository.UpdateSubcodeAsync(subcodeToDeactivate);

        // Act
        var activeReasonCodes = await _repository.GetActiveReasonCodesAsync();

        // Assert
        var activeList = activeReasonCodes.ToList();
        Assert.Equal(9, activeList.Count); // Still 9 categories

        // Check A1 category has 8 active subcodes (one deactivated)
        var a1Category = activeList.First(r => r.Category.CategoryCode == "A1");
        Assert.Equal(8, a1Category.Subcodes.Count());
        Assert.All(a1Category.Subcodes, s => Assert.True(s.IsActive));
    }

    [Fact]
    public async Task ValidateReasonCodeAssignmentAsync_WithValidCode_ReturnsTrue()
    {
        // Act
        var isValid = await _repository.ValidateReasonCodeAssignmentAsync("A1", "1");

        // Assert
        Assert.True(isValid);
    }

    [Fact]
    public async Task ValidateReasonCodeAssignmentAsync_WithInvalidCode_ReturnsFalse()
    {
        // Act
        var isValid = await _repository.ValidateReasonCodeAssignmentAsync("X9", "99");

        // Assert
        Assert.False(isValid);
    }

    [Fact]
    public async Task CascadeDeleteBehavior_DeletesCategoryAndSubcodes()
    {
        // Arrange - Create a test category with subcodes
        var testCategory = new StoppageReasonCategory("Z1", "Test Delete Category", 1, 1);
        var categoryId = await _repository.CreateCategoryAsync(testCategory);

        var testSubcode = new StoppageReasonSubcode(
            categoryId, "Z1", "1", "Test Delete Subcode", null, 1, 1);
        await _repository.CreateSubcodeAsync(testSubcode);

        // Act - Delete the category
        var deleted = await _repository.DeleteCategoryAsync(categoryId);

        // Assert
        Assert.True(deleted);

        // Verify category and subcode are both deleted
        var category = await _repository.GetCategoryByCodeAsync("Z1");
        Assert.Null(category);

        var subcode = await _repository.GetSubcodeAsync("Z1", "1");
        Assert.Null(subcode);
    }

    /// <summary>
    /// Set up test database with Phase 1 stoppage reason tables
    /// </summary>
    private async Task SetupTestDatabaseAsync()
    {
        using var connection = await _connectionFactory.CreateConnectionAsync();

        // Create stoppage reason categories table
        await connection.ExecuteAsync(@"
            CREATE TABLE IF NOT EXISTS stoppage_reason_categories (
                id SERIAL PRIMARY KEY,
                category_code VARCHAR(10) UNIQUE NOT NULL,
                category_name VARCHAR(100) NOT NULL,
                category_description TEXT,
                matrix_row INTEGER NOT NULL CHECK (matrix_row BETWEEN 1 AND 3),
                matrix_col INTEGER NOT NULL CHECK (matrix_col BETWEEN 1 AND 3),
                is_active BOOLEAN DEFAULT true,
                created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                
                CONSTRAINT stoppage_categories_code_not_empty CHECK (category_code != ''),
                CONSTRAINT stoppage_categories_name_not_empty CHECK (category_name != ''),
                UNIQUE(matrix_row, matrix_col)
            );");

        // Create stoppage reason subcodes table
        await connection.ExecuteAsync(@"
            CREATE TABLE IF NOT EXISTS stoppage_reason_subcodes (
                id SERIAL PRIMARY KEY,
                category_id INTEGER NOT NULL REFERENCES stoppage_reason_categories(id) ON DELETE CASCADE,
                category_code VARCHAR(10) NOT NULL,
                subcode VARCHAR(10) NOT NULL,
                subcode_name VARCHAR(100) NOT NULL,
                subcode_description TEXT,
                matrix_row INTEGER NOT NULL CHECK (matrix_row BETWEEN 1 AND 3),
                matrix_col INTEGER NOT NULL CHECK (matrix_col BETWEEN 1 AND 3),
                is_active BOOLEAN DEFAULT true,
                created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                
                CONSTRAINT stoppage_subcodes_code_not_empty CHECK (subcode != ''),
                CONSTRAINT stoppage_subcodes_name_not_empty CHECK (subcode_name != ''),
                UNIQUE(category_id, subcode),
                UNIQUE(category_id, matrix_row, matrix_col),
                UNIQUE(category_code, subcode)
            );");

        // Create indexes
        await connection.ExecuteAsync(@"
            CREATE INDEX IF NOT EXISTS idx_stoppage_categories_matrix 
            ON stoppage_reason_categories(matrix_row, matrix_col) 
            WHERE is_active = true;

            CREATE INDEX IF NOT EXISTS idx_stoppage_subcodes_category_matrix 
            ON stoppage_reason_subcodes(category_id, matrix_row, matrix_col) 
            WHERE is_active = true;");
    }

    /// <summary>
    /// Seed test database with standard 3x3 matrix reason codes
    /// </summary>
    private async Task SeedTestDataAsync()
    {
        using var connection = await _connectionFactory.CreateConnectionAsync();

        // Insert 9 standard categories (3x3 matrix)
        var categories = new[]
        {
            new { Code = "A1", Name = "Mechanical Failure", Row = 1, Col = 1 },
            new { Code = "A2", Name = "Electrical Issues", Row = 1, Col = 2 },
            new { Code = "A3", Name = "Tooling Problems", Row = 1, Col = 3 },
            new { Code = "B1", Name = "Material Issues", Row = 2, Col = 1 },
            new { Code = "B2", Name = "Process Setup", Row = 2, Col = 2 },
            new { Code = "B3", Name = "Quality Problems", Row = 2, Col = 3 },
            new { Code = "C1", Name = "Operator Issues", Row = 3, Col = 1 },
            new { Code = "C2", Name = "Planned Downtime", Row = 3, Col = 2 },
            new { Code = "C3", Name = "External Factors", Row = 3, Col = 3 }
        };

        foreach (var cat in categories)
        {
            await connection.ExecuteAsync(@"
                INSERT INTO stoppage_reason_categories (category_code, category_name, matrix_row, matrix_col)
                VALUES (@Code, @Name, @Row, @Col)
                ON CONFLICT (category_code) DO NOTHING",
                cat);
        }

        // Insert subcodes for each category (9 per category)
        var subcodes = new[]
        {
            // A1 - Mechanical Failure subcodes
            new { Category = "A1", Code = "1", Name = "Motor Failure", Row = 1, Col = 1 },
            new { Category = "A1", Code = "2", Name = "Bearing Problems", Row = 1, Col = 2 },
            new { Category = "A1", Code = "3", Name = "Belt/Chain Issues", Row = 1, Col = 3 },
            new { Category = "A1", Code = "4", Name = "Hydraulic Issues", Row = 2, Col = 1 },
            new { Category = "A1", Code = "5", Name = "Pneumatic Issues", Row = 2, Col = 2 },
            new { Category = "A1", Code = "6", Name = "Gearbox Problems", Row = 2, Col = 3 },
            new { Category = "A1", Code = "7", Name = "Structural Issues", Row = 3, Col = 1 },
            new { Category = "A1", Code = "8", Name = "Safety System", Row = 3, Col = 2 },
            new { Category = "A1", Code = "9", Name = "Other Mechanical", Row = 3, Col = 3 },
            
            // A2 - Electrical Issues subcodes
            new { Category = "A2", Code = "1", Name = "Power Supply", Row = 1, Col = 1 },
            new { Category = "A2", Code = "2", Name = "Control System", Row = 1, Col = 2 },
            new { Category = "A2", Code = "3", Name = "Sensor Problems", Row = 1, Col = 3 },
            new { Category = "A2", Code = "4", Name = "Wiring Issues", Row = 2, Col = 1 },
            new { Category = "A2", Code = "5", Name = "Motor Drive", Row = 2, Col = 2 },
            new { Category = "A2", Code = "6", Name = "HMI Problems", Row = 2, Col = 3 },
            new { Category = "A2", Code = "7", Name = "Communication", Row = 3, Col = 1 },
            new { Category = "A2", Code = "8", Name = "Instrumentation", Row = 3, Col = 2 },
            new { Category = "A2", Code = "9", Name = "Other Electrical", Row = 3, Col = 3 },
            
            // B1 - Material Issues subcodes
            new { Category = "B1", Code = "1", Name = "Material Shortage", Row = 1, Col = 1 },
            new { Category = "B1", Code = "2", Name = "Material Quality", Row = 1, Col = 2 },
            new { Category = "B1", Code = "3", Name = "Wrong Material", Row = 1, Col = 3 },
            new { Category = "B1", Code = "4", Name = "Material Handling", Row = 2, Col = 1 },
            new { Category = "B1", Code = "5", Name = "Material Prep", Row = 2, Col = 2 },
            new { Category = "B1", Code = "6", Name = "Consumables", Row = 2, Col = 3 },
            new { Category = "B1", Code = "7", Name = "Material Jam", Row = 3, Col = 1 },
            new { Category = "B1", Code = "8", Name = "Storage Issues", Row = 3, Col = 2 },
            new { Category = "B1", Code = "9", Name = "Other Material", Row = 3, Col = 3 }
        };

        foreach (var sub in subcodes)
        {
            await connection.ExecuteAsync(@"
                INSERT INTO stoppage_reason_subcodes (category_id, category_code, subcode, subcode_name, matrix_row, matrix_col)
                SELECT c.id, @Category, @Code, @Name, @Row, @Col
                FROM stoppage_reason_categories c
                WHERE c.category_code = @Category
                ON CONFLICT (category_code, subcode) DO NOTHING",
                sub);
        }
    }
}