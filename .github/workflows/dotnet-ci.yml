name: .NET CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.sln'
      - '**/*.csproj'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.sln'
      - '**/*.csproj'

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: adam_counter_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore Industrial.Adam.Logger.sln

    - name: Build solution
      run: dotnet build Industrial.Adam.Logger.sln --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test Industrial.Adam.Logger.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Generate code coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.10
      with:
        reports: 'coverage/**/coverage.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;JsonSummary'

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: true
        verbose: true

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coveragereport/

    - name: Check code formatting
      run: dotnet format Industrial.Adam.Logger.sln --verify-no-changes

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Run security audit
      run: dotnet list package --vulnerable --include-transitive

    - name: Install dotnet-outdated
      run: dotnet tool install --global dotnet-outdated-tool

    - name: Check for outdated packages
      run: dotnet outdated Industrial.Adam.Logger.sln

  publish-packages:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore Industrial.Adam.Logger.sln

    - name: Build for release
      run: dotnet build Industrial.Adam.Logger.sln --configuration Release --no-restore

    - name: Pack NuGet packages
      run: dotnet pack Industrial.Adam.Logger.sln --configuration Release --no-build --output ./packages

    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg