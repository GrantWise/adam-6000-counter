name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      test-groups: ${{ steps.test-groups.outputs.groups }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh

    - name: Setup development environment
      run: ./scripts/setup-dev-environment.sh

    - name: Determine test groups
      id: test-groups
      run: |
        if [ -f scripts/test-groups.sh ]; then
          echo "groups=[\"1a\", \"1b\", \"2a\", \"2b\", \"3a\", \"3b\", \"4a\", \"4b\"]" >> $GITHUB_OUTPUT
        else
          echo "groups=[\"1a\", \"1b\", \"2a\", \"2b\"]" >> $GITHUB_OUTPUT
        fi

  test-groups:
    runs-on: ubuntu-latest
    needs: setup-environment
    strategy:
      fail-fast: false
      matrix:
        test-group: ${{ fromJson(needs.setup-environment.outputs.test-groups) }}
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: adam_counter_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh

    - name: Setup development environment
      run: ./scripts/setup-dev-environment.sh

    - name: Build solution
      run: dotnet build Industrial.Adam.Logger.sln --configuration Release

    - name: Run test group ${{ matrix.test-group }}
      run: |
        if [ -f scripts/test-group-${{ matrix.test-group }}.sh ]; then
          ./scripts/test-group-${{ matrix.test-group }}.sh
        else
          echo "Test group ${{ matrix.test-group }} script not found, skipping"
        fi
      timeout-minutes: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-group-${{ matrix.test-group }}
        path: |
          TestResults/
          coverage/
          logs/

  simulator-tests:
    runs-on: ubuntu-latest
    needs: setup-environment
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: adam_counter_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh

    - name: Setup development environment
      run: ./scripts/setup-dev-environment.sh

    - name: Build solution
      run: dotnet build Industrial.Adam.Logger.sln --configuration Release

    - name: Start simulators
      run: ./scripts/start-simulators.sh

    - name: Wait for simulators to be ready
      run: sleep 10

    - name: Run simulator tests
      run: ./scripts/test-simulators.sh
      timeout-minutes: 15

    - name: Stop simulators
      if: always()
      run: ./scripts/stop-simulators.sh

    - name: Upload simulator test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: simulator-test-results
        path: |
          TestResults/
          logs/

  full-system-test:
    runs-on: ubuntu-latest
    needs: [test-groups, simulator-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: adam_counter_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh

    - name: Setup development environment
      run: ./scripts/setup-dev-environment.sh

    - name: Build solution
      run: dotnet build Industrial.Adam.Logger.sln --configuration Release

    - name: Run full system test
      run: |
        if [ -f scripts/full-system-test.sh ]; then
          ./scripts/full-system-test.sh
        else
          echo "Full system test script not found, running basic test suite"
          ./scripts/test-logger.sh
        fi
      timeout-minutes: 45

    - name: Upload full system test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: full-system-test-results
        path: |
          TestResults/
          coverage/
          logs/

  coverage-report:
    runs-on: ubuntu-latest
    needs: [test-groups, simulator-tests]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh

    - name: Setup development environment
      run: ./scripts/setup-dev-environment.sh

    - name: Build solution
      run: dotnet build Industrial.Adam.Logger.sln --configuration Release

    - name: Run coverage tests
      run: |
        if [ -f scripts/run-coverage.sh ]; then
          ./scripts/run-coverage.sh
        else
          ./scripts/run-coverage-simple.sh
        fi

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.10
      with:
        reports: 'coverage/**/coverage.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;JsonSummary'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        flags: integration-tests
        verbose: true

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: integration-coverage-report
        path: coveragereport/